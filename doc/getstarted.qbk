[section:getstarted Getting Started]
[teletype]

[section Installing and Using]
Once the binary installers are built, they will be available in the
[@http://github.com/purpleKarrot/libMaoni/downloads download section].

Ubuntu users will be able to install libMaoni from the purpleKarrot repository:

  $ sudo add-apt-repository ppa:purplekarrot/ppa
  $ sudo apt-get update
  $ sudo apt-get install maoni

As long as there is no download available for your platform, you will have to
[link getstarted.getstarted.compiling compile it] yourselfs.

Once you installed libMaoni, you can start writing your first application with
it. First, create a C++ source file and include the libMaoni header:

  #include <Maoni.hpp>

Make sure the headers can be found by your compiler (this should concern Windows
users only).

Now compile this C++ file (right, there is no additional code required) and link
it agains the library files [*Maoni] and [*MaoniMain]. It depends on your
Compiler how these files are actually called (something like Maoni.lib or
libMaoni.so) and how you link agains them. Of course you already know this.

Now you can launch the resulting executable file. Congratulations, you
successfuly wrote your first application with libMaoni! Head on to the
[link tutorial.tutorial Tutorial Section] to see some examples how you can
extend it.

[section Parallel Rendering]

[figure parallel_dragon.jpg..Parallel rendering of the Stanford Dragon using
 eight ranks and the Comic Style Shader Algorithm. The data rendered by the
 ranks are dyed differently.
]

With libMaoni it is very easy to build applications that are suitable for
parallel rendering. Currently libMaoni supports the two compositing engines 
[@http://www.equalizergraphics.com/ Equalizer] and
[@http://www.cs.unm.edu/~kmorel/IceT/ IceT].

To build an application that can benefit from parallelization, link agains
[*MaoniEq] or [*MaoniIceT] instead of [*Maoni]. There are no changes required in
the source code.

Now, how you launch your application greatly depends on the compositing engine
you are using. If you are using [*MaoniIceT], it also depends on the underlying
[*MPI] implementation.

[/ todo: rewrite this. it is too linux specific, imho]
The following information on parallel rendering using libMaoni are for Ubuntu Linux.

For Equalizer as well as IceT the master node needs remote access to the 
render clients without password prompt. Install [@apt://openssh-server OpenSSH Server] 
on the clients, create a key pair on the master and copy the public key to the 
authorized_keys file on the clients ([@http://www.open-mpi.org/faq/?category=rsh#ssh-keys How-To]). 
You have to login at least once to accept the connection before the client can be used 
for parallel rendering.

[table MPI, IceT and Equalizer resources
    [[Resource] [URL]]
    [[`OpenSSHKeys`]             [[@https://help.ubuntu.com/community/SSH/OpenSSH/Keys]]]
    [[`Open MPI`]                [[@http://www.open-mpi.org/]]]
    [[`Open MPI FAQ`]            [[@http://www.open-mpi.org/faq/]]]
    [[`IceT Project`]            [[@http://www.cs.unm.edu/~kmorel/IceT/]]]
    [[`IceT User Guide`]         [[@http://www.cs.unm.edu/~kmorel/IceT/IceTUsersGuide.pdf]]]
	[[`Equalizer Project`]       [[@http://www.equalizergraphics.com/]]]
	[[`Equalizer Download`]      [[@http://sourceforge.net/projects/equalizer/]]]
]

[section IceT]
Parallel rendering using IceT needs [@apt://libopenmpi-dev Open MPI] installed. 
Install, build or copy libMaonis's IceT binary to the same workpath on all the 
machines or use a shared drive. Start the application e.g.:

  $ mpirun -np [number of processes] --host [comma separated host names] [path to executable] -display :0

[tip Have a look at the [@http://www.open-mpi.org/faq/?category=running#simple-spmd-run Open MPI documentation]
 on how to create a host file to define your render cluster's network environment.]

[note libMaoni uses absolute Paths to load images, models and so on, thus all 
the files need to have the same absolute filesystem path.]
[endsect]

[section Equalizer]
Parallel rendering using Equalizer needs [@http://sourceforge.net/projects/equalizer/ Equalizer] installed. 
A Maoni-Equalizer application has to be distributed to the render clients. To run the application, Equalizer Server 
has to be started on the master render client and the application using corresponding parameters. Have a look at 
[@http://www.equalizergraphics.com/documentation.html Equalizer's User Guides] to find all about Equalizer config files and parameters.


Because of an open [@http://sourceforge.net/tracker/index.php?func=detail&aid=3023805&group_id=170962&atid=856209 Equalizer bug]
, the render data can't be shown in a Qt render context.
[endsect]
[endsect]

[endsect]

[section:compiling Building from Source]
Please note: As long as you just want to create applications with libMaoni,
there is no need to compile it from source. We stronly suggest using a binary
installer instead.

If however there is no binary installer available for your platform, or you want
to modify the inner workings of libMaoni, please read on.

[section get the source code]
Download the [@http://github.com/purpleKarrot/libMaoni/archives/master libMaoni
source code] and extract it to your directory of choice. Then download and
extract the [@http://github.com/purpleKarrot/CToolBox/archives/master CToolBox]
script files and place them into the CToolBox directory inside the libMaoni
directory.

Alternatively, you can get the source code using Git:
 
  $ git clone git://github.com/purpleKarrot/libMaoni.git
  $ git submodule init
  $ git submodule update

[endsect]

[section configure and compile]
You should have already have a compiler installed on your system. We assume you
are using the [@http://developer.apple.com/technologies/tools/ Apple Developer
Tools] on OSX, [@http://www.microsoft.com/express/Downloads Visual C++ 2008
Express Edition] if you are working on Windows or [@http://gcc.gnu.org/ GCC]
otherwise. Additionally you will need [@http://cmake.org/ CMake] to configure
the used tools. Now open a terminal, navigate to the libMaoni directory and
type:

  $ mkdir build
  $ cd build
  $ cmake ..
  $ make

On Windows the commands differ slightly:

  > mkdir build
  > cd build
  > call "%VS90COMNTOOLS%vsvars32.bat"
  > cmake -G "NMake Makefiles" ..
  > nmake

CMake will fail if it does not find all required dependancies on your system.
Please check the dependancies section and run the cmake command again after you
installed the missing dependances. Once the CMake succeeds, make or nmake should
succeed too.

[note If you want to use an IDE like Visual Studio or XCode to build libMaoni,
CMake can generate the project files for you. see the section
[@http://cmake.org/cmake/help/cmake-2-8-docs.html#section_Generators Generators]
in the CMake Manual.]
[endsect]

[section:dep dependancies]

[section Boost]
libboost1.40-all-dev or
[@http://www.boostpro.com/download/ BoostPro Binary Installer for Visual C++]
[endsect]

[section Equalizer]
[@https://sourceforge.net/projects/equalizer/files/ Equalizer] is provided as
source code only, there is no binary installer available. Consult the Equalizer
documentation how to compile it.

If you don't want to build [*MaoniEq], you may set the option
MAONI_SKIP_EQUALIZER to OFF in CMake. You will not need Equalizer in this case.
[endsect]

[section MPI]
There are many implementations of MPI available. We successfully tried
[@apt://libopenmpi-dev Open MPI] on Ubuntu. However, any other implementation
should work just fine. We leave the final choice to you.

MPI is used for the IceT based compositing. If you don't want to build
[*MaoniIceT], you may set the option MAONI_SKIP_ICET to OFF in CMake. You will
not need MPI in this case.
[endsect]

[section Qt]
There are binary installers available in the [@http://qt.nokia.com/downloads
Qt Downloads Website]. On Ubuntu the package [@apt://libqt4-dev libqt4-dev] may
be used.
[endsect]

[endsect]
[endsect]

[section Contribute]
We find it very comfortable to work on [@http://www.github.com github.com].

Git allows an alternative work flow people aren't used from CVS or SVN. You
don't have to become a libMaoni developer and don't have to gain access to the
repository to be able to contribute patches, instead you simply fork the projekt
and work on your personal fork.


There is an [@http://code.google.com/p/git-osx-installer/ Installer for OSX],
Windows users might want to use [@http://code.google.com/p/msysgit/ msysGit],
Ubuntu users [@apt://git-core click here].

See the [@http://www.kernel.org/pub/software/scm/git/docs/gittutorial.html
Git Tutorial] to get started, then see
[@http://www.kernel.org/pub/software/scm/git/docs/everyday.html Everyday Git]
for a useful minimum set of commands, and "man git-commandname" for
documentation of each command. See the 
[@http://www.kernel.org/pub/software/scm/git/docs/user-manual.html Git User's
Manual] for a more in-depth introduction.


Create an account on [@http://www.github.com github.com]; you can find the
guides on how to fork a project and creating and importing ssh-keys into your
github account in the guide section of the [@http://help.github.com/ help area].


[tip
 Add the purpleKarrot repository as a remote:

  `$ git remote add upstream git://github.com/purpleKarrot/libMaoni.git`

This simplifies adopting our changes to your fork:

  `$ git pull upstream`

]

If you would like to share your changes with the whole libMaoni community, tell
us in our [@http://purplekarrot.net/forum.html Forum] or use the [*pullrequest]
button on [@http://www.github.com github.com].

[endsect]
[endsect]

