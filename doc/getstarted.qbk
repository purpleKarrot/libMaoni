
[section Getting Started]

[section Installing and Using]
Users of Ubuntu and Ubuntu derivatives (such as Kubuntu) rejoice! 

[: sudo add-apt-repository ppa:purplekarrot/ppa
   sudo apt-get update
   sudo apt-get install maoni]

[endsect]

[section Parallel Rendering]
For Equalizer as well as IceT the master node needs remote access to the 
render clients without password prompt. Install [@apt://openssh-server OpenSSH Server] 
on the clients, create a key pair on the master and copy the public key to the 
authorized_keys file on the clients ([@http://www.open-mpi.org/faq/?category=rsh#ssh-keys How-To]). 
You have to login once to accept the connection before the client can be used 
for parallel rendering.

[table MPI, IceT and Equalizer resources
    [[Resource] [URL]]
    [[`OpenSSHKeys`]  [[@https://help.ubuntu.com/community/SSH/OpenSSH/Keys]]]
    [[`Open MPI`]  [[@http://www.open-mpi.org/]]]
    [[`Open MPI FAQ`]    [[@http://www.open-mpi.org/faq/]]]
    [[`IceT Project`]  [[@http://www.cs.unm.edu/~kmorel/IceT/]]]
    [[`IceT User Guide`]  [[@http://www.cs.unm.edu/~kmorel/IceT/IceTUsersGuide.pdf]]]
]

[section IceT]

Parallel rendering using IceT needs [@apt://libopenmpi-dev Open MPI] installed. 
Install, build or copy libMaonis's IceT binary to the same workpath on all the 
machines. Start the application e.g.:

[:$ mpirun -np \[number of processes\] --host \[comma separated host names\] \[path to executable\] -display :0]

[endsect]

[endsect]

[section Building from Source]
Download the [@http://github.com/purpleKarrot/libMaoni/archives/master libMaoni
source code] and extract it to your directory of choice.

[section github.com]
There is an [@http://code.google.com/p/git-osx-installer/ Installer for OSX],
Windows users might want to use [@http://code.google.com/p/msysgit/ msysGit],
Ubuntu users [@apt://git-core click here].

See the [@http://www.kernel.org/pub/software/scm/git/docs/gittutorial.html
Git Tutorial] to get started, then see
[@http://www.kernel.org/pub/software/scm/git/docs/everyday.html Everyday Git]
for a useful minimum set of commands, and "man git-commandname" for
documentation of each command. See the 
[@http://www.kernel.org/pub/software/scm/git/docs/user-manual.html Git User's
Manual] for a more in-depth introduction.

[section How-to use github and Checkout a Project]
GIT allows an alternative work flow people aren't used from CVS or SVN. You
don't have to become a libMaoni developer and don't have to gain access to the
repository to be able of up- and download patches, instead you have to fork the
projekt and will work on your personal fork.

Create an account on [@http://www.github.com github.com]; you can find the
guides on how to fork a project and creating and importing ssh-keys into your
github account in the popular guide section of the help area.

Now you can fetch your fork to your local machine: open Eclipse and create a new
C++ Project, an [*Empty Makefile Project] using [*Other Toolchain].

[tip If you do not want to create an account on github.com, just use the projects
read-only url to checkout libMaoni directly to your local git repository]

[note See the next section on how to install git for your specific operating system.]

Open a shell and switch to your workspace and create the clone of your fork.

[:$ git clone git@github.com:yourLogin/libMaoni.git]

and the upstream to purpleKarrots libMaoni repository:

[:$ git remote add upstream git://github.com/purpleKarrot/libMaoni.git]

Update your fork (origin) from purpleKarrots libMaoni repository (upstream) so
your fork is up to date:

[:$ git pull upstream master]

This will update your remote repository as well as your local files.

[tip There is a large help section on github.com addressing topics like how-to fork 
or the first steps using git]
[endsect]


[section How-to Commit Modifications]

[:$ git add .]

use filepaths instead of . if you don't want to add every modification to a
certain commit, modifiy .gitignore to permanently ban files or folder from
commiting.

Fix the modifications by creating a meaningful commit and keep track of your
commits by creating a single one for every requirement:

[:$ git commit -m'some meaningful comment']

Until now you just copied the libMaoni project to your repository on github and
to your local harddrive and modified your local version. Upload your fixed
commit to your remote repository on github:

[:$ git push origin master]

[note Remember the repository names!]
[table GIT repository names
    [[Reference] [Location]]
    [[`upstream`]   [git://github.com/purpleKarrot/libMaoni.git (read only)]]
    [[`origin`]  	[your remote repository on github.com (read and write)]]
    [[`master`]		[your local clone]]
]

If you like to make your changes public to the whole libMaoni community, use the
pullrequest button on github to ask for your code being pulled to purpleKarrot's
repository.
[endsect]

[endsect]

[section Developing libMaoni on Ubuntu Linux]
This is a how-to develop for libMaoni from scratch using
[@http://www.ubuntu.com/ Ubuntu 10.04 Linux] and [@http://eclipse.org/downloads/ 
Eclipse IDE for C/C++ Developers].

To checkout your fork you have to install [@apt://git-core GIT] first, open a
terminal:

[:$ sudo aptitude install git-core]

We use cmake to check for dependencies and creating the makefiles and need some 
other [@apt://cmake,g++,libqglviewer-qt4-dev,libboost1.40-all-dev,libglew1.5-dev,doxygen,docbook-xsl,dblatex,lib3ds-dev,fop packages]:

[:$ sudo aptitude install cmake g++ libgqlviewer-qt4-dev libboost1.40-all-dev libglew1.5-dev doxygen docbook-xsl lib3ds-dev fop]

For developing libMaoni, you have to install equalizer, a parallel rendering
framework where libMaoni was intended to be a viewer for when the project
started. You can get equalizer from
[@https://sourceforge.net/projects/equalizer/files/ sourceforge].

[:$ sudo aptitude install uuid-dev bison flex

  $ make -j4
  
  $ sudo make install]

For developing libMaoni with IceT you also need to install the following:

[:$ sudo aptitude install libopenmpi-dev]


Now let us build libMaoni! Still in the terminal create a "build" folder as
child the libMaoni project folder:

[:$ cd libMaoni

  $ mkdir build]

Enter this folder and create the Makefiles:

[:$ cd build

  $ cmake ..]

If there are still some dependencies missing you will get an error now.


The different kinds of building libMaoni are controlled by make arguments, e.g.:

[table libMaoni make parameters
    [[Parameter] [Build]]
    [[`$ make examples`]      [compiles the viewer including file-loaders and algorithms]]
    [[`$ make libMaoni-man`]  [creates the unix manpages]]
    [[`$ make libMaoni-html`] [creates the html api and documentation]]
    [[`$ make libMaoni-pdf`] [creates the pdf api and documentation]]
]
[endsect]


[section The hard way]
In our experience, it's very comfortable to develop on a linux system as there are 
powerful tools avaiable which are missing or only rudimentary avaiable on windows 
or mac osx such as package manager or bash-shell.
However if you'd like to build libMaoni for windows or mac osx and to create the 
installers here's the how-to.

[section Developing libMaoni on Mac OSX]

[table necessary tools and libraries on Mac OSX
    [[Software] [URL]]
    [[`GIT`]    [[@http://code.google.com/p/git-osx-installer/]]]
    [[`CMAKE`]  [[@http://cmake.org/]]]
    [[`Boost 1.40.0`]  [[@http://boost.org/]]]
    [[`Qt libraries 4.6.2 for MAC OS X`]  [[@http://qt.nokia.com/downloads]]]
    [[`QGLViewer`]  [[@http://www.libqglviewer.com/download.html]]]
    [[`lib3ds`]  [[@http://code.google.com/p/lib3ds/]]]
    [[`glew`]  [[@http://glew.sourceforge.net/]]]
]

Install GIT and CMAKE dimages. Download and unpack boost 1.40.0 and install boost-headers. 
Download and install QT LGPL. Download, build and install QGLViewer.

[tip If you get an error "no rule to make target 'qglviewer.icns'" just create an 
empty file: touch qglviewer.icns or delete the mentions of this file from the 
QGlViewer.pro file and build again]

Download, configure and build lib3ds.

Use GIT to clone purpleKarrots libMaoni repository from github.com. Open a terminal, 
navigate to your project folder, create a folder "build", enter this folder and call 
"cmake ..". Build the project using your prefered make parameter.
[endsect]

[section Developing libMaoni on Windows]
There is some software you need to be able to checkout the git-repository and to 
build libMaoni. Sometimes there are several products avaiable but here's a list 
of software we tested and used our own.

[table necessary tools and libraries on Windows
    [[Software] [URL]]
    [[`GIT`]      [[@http://code.google.com/p/msysgit/]]]
    [[`CMAKE`]  [[@http://cmake.org/]]]
    [[`CToolBox`] [[@http://github.com/purpleKarrot/CToolBox/tarball/master]]]
    [[`Visual Studio 08`] [[@http://www.microsoft.com/express/Downloads]]]
    [[`Boost 1.40.0 Headers`] [[@http://www.boostpro.com/]]]
    [[`QT libraries 4.6.2 for Windows`] [[@http://qt.nokia.com/downloads]]]
    [[`MPICH2`] [[@http://www.mcs.anl.gov/research/projects/mpich2/]]]
]

Install Visual Studio 2008, msysgit, cmake, boost and QT.

You can use GIT-Bash or GUI to clone purpleKarrots libMaoni repository from github.com. 
As cmake can't load the CToolBox automatically you have to create a folder "build" in your 
libMaoni project folder and unpack the CToolBox tarball manually (./libMaoni/build/CToolBox/*.cmake).

Open CMAKE-GUI and configure until it's successful. Generate the Visual Studio 2008 project 
files. Open libMaoni project in Visual Studio and build the release (not debug).


[endsect]
[endsect]
[endsect]
[endsect]
