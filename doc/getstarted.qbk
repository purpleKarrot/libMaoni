[section Getting Started]
[teletype]

[section Installing and Using]
Users of Ubuntu and Ubuntu derivatives (such as Kubuntu) rejoice! 

  $ sudo add-apt-repository ppa:purplekarrot/ppa
  $ sudo apt-get update
  $ sudo apt-get install maoni
  
Users of Intel Macs find 32Bit and 64Bit Maoni dmg under

 http://github.com/purpleKarrot/libMaoni/downloads

[endsect]

[section Building from Source]
Download the [@http://github.com/purpleKarrot/libMaoni/archives/master libMaoni
source code] and extract it to your directory of choice.

[section github.com]
There is an [@http://code.google.com/p/git-osx-installer/ Installer for OSX],
Windows users might want to use [@http://code.google.com/p/msysgit/ msysGit],
Ubuntu users [@apt://git-core click here].

See the [@http://www.kernel.org/pub/software/scm/git/docs/gittutorial.html
Git Tutorial] to get started, then see
[@http://www.kernel.org/pub/software/scm/git/docs/everyday.html Everyday Git]
for a useful minimum set of commands, and "man git-commandname" for
documentation of each command. See the 
[@http://www.kernel.org/pub/software/scm/git/docs/user-manual.html Git User's
Manual] for a more in-depth introduction.

[section How-to use github and Checkout a Project]
GIT allows an alternative work flow people aren't used from CVS or SVN. You
don't have to become a libMaoni developer and don't have to gain access to the
repository to be able of up- and downloading patches, instead you have to fork the
projekt and will work on your personal fork.

Create an account on [@http://www.github.com github.com]; you can find the
guides on how to fork a project and creating and importing ssh-keys into your
github account in the popular guide section of the [@http://help.github.com/ help area].

Now you can fetch your fork to your local machine: open Eclipse and create a new
C++ Project, an [*Empty Makefile Project] using [*Other Toolchain].

[tip If you don't want to create an account on github.com, just use the projects
read-only url to checkout libMaoni directly to your local git repository]

[note See the next section on how to install git for your specific operating system.]

Open a terminal, switch to your workspace and create the clone of your fork.

  $ git clone git@github.com:yourLogin/libMaoni.git

and the upstream to purpleKarrots libMaoni repository:

  $ git remote add upstream git://github.com/purpleKarrot/libMaoni.git

Update your fork (origin) from purpleKarrots libMaoni repository (upstream) so
your fork is up to date:

  $ git pull upstream master

This will update your remote repository as well as your local files.

[tip There is a large [@http://help.github.com/ help section] on [@http://www.github.com github.com]
 addressing topics like how-to fork or the first steps using git]
[endsect]


[section How-to Commit Modifications]

  $ git add .

use filepaths instead of [*.] if you don't want to add every modification to a
certain commit, modify [*.gitignore] to permanently ban files or folders from
commiting.

Fix the modifications by creating a meaningful commit and keep track of your
commits by creating a single one for every requirement:

  $ git commit -m'some meaningful comment'

Until now you just copied the libMaoni project to your repository on github as well as
 your local harddrive and modified your local version. Upload your fixed
commit to your remote repository on github:

  $ git push origin master

[note Remember the repository names!]
[table GIT repository names
    [[Reference] [Location]]
    [[`upstream`]   [git://github.com/purpleKarrot/libMaoni.git (read only)]]
    [[`origin`]  	[your remote repository on github.com (read and write)]]
]

If you like to make your changes public to the whole libMaoni community, use the
[*pullrequest] button on [@http://www.github.com github.com] to ask for your code being pulled to purpleKarrot's
repository.
[endsect]
[endsect]

[section Developing libMaoni on Ubuntu Linux]
This is a how-to develop for libMaoni from scratch using
[@http://www.ubuntu.com/ Ubuntu 10.04 Linux] and [@http://eclipse.org/downloads/ 
Eclipse IDE for C/C++ Developers].

You have already seen how to install [*git], fork and pull a project from 
[@http://www.github.com github.com] in the previous chapter.

We use cmake to check for dependencies and creating the makefiles. Install other dependencies using  
[@apt://cmake,g++,libqglviewer-qt4-dev,libboost1.40-all-dev,libglew1.5-dev,doxygen,docbook-xsl,lib3ds-dev,fop this] 
apt link or the following command:

  $ sudo aptitude install cmake g++ libgqlviewer-qt4-dev libboost1.40-all-dev libglew1.5-dev doxygen docbook-xsl lib3ds-dev fop

For developing libMaoni, you have to install [@http://www.equalizergraphics.com/ Equalizer], 
a parallel rendering framework where libMaoni was intended to be a viewer for when the project
started. You can get equalizer from [@https://sourceforge.net/projects/equalizer/files/ sourceforge].

Install the following [@apt://uuid-dev,bison,flex dependencies] and Equalizer itself:

  $ sudo aptitude install uuid-dev bison flex
  $ make -j4
  $ sudo make install

For developing libMaoni with IceT you also need to install [@apt://libopenmpi-dev libopenmpi-dev]:

  $ sudo aptitude install libopenmpi-dev

Switch to your libMaoni project folder and download external CMake files which are necessary for libMaoni's toolchain:

  $ git submodule init
  $ git submodule update

Now let us build libMaoni! Still in the terminal create a "build" folder as
child of the libMaoni project folder:

  $ mkdir build

Enter this folder and create the Makefiles:

  $ cd build
  $ cmake ..

If there are still some dependencies missing, you will get an error now.

The different kinds of building libMaoni are controlled by make arguments, e.g.:

[table libMaoni make parameters
    [[Parameter] [Build]]
    [[`$ make help`]          [lists all avaiable parameters]]
    [[`$ make examples`]      [compiles the viewer including file-loaders and algorithms]]
    [[`$ sudo make install`]  [install your libMaoni library]]
    [[`$ make libMaoni-html`] [creates the html api and documentation]]
    [[`$ make libMaoni-pdf`]  [creates the pdf api and documentation]]
]

[endsect]

[section Developing libMaoni on Mac OS X and Windows]
If you'd like to build libMaoni for Windows or Mac OS X and create your own 
installers here's the how-to.

[section Developing libMaoni on Mac OS X]

Check whether the Apple Developer Tools are installed already. Additionally you need 
this software:

* [@http://code.google.com/p/git-osx-installer/ GIT]
* [@http://cmake.org/ CMake]
* [@http://boost.org/ Boost 1.40.0]
* [@http://qt.nokia.com/downloads Qt libraries 4.6.2 for MAC OS X]
* [@http://www.libqglviewer.com/download.html QGLViewer]
* [@http://code.google.com/p/lib3ds/ lib3ds]
* [@http://glew.sourceforge.net/ glew]

Install [*GIT] and [*CMake] disk images. Download and unpack [*Boost 1.40.0] and install boost-headers. 
Download and install [*Qt LGPL]. Download, build and install [*QGLViewer].

[tip If you get an error "no rule to make target 'qglviewer.icns'" just create an 
empty file: touch qglviewer.icns or delete the mentions of this file from the 
QGlViewer.pro file and build again]

Download, configure and build [*lib3ds].

Use [*GIT] to clone [@http://github.com/purpleKarrot/libMaoni purpleKarrots libMaoni repository]. 
Open a terminal and navigate to your project folder. Download external 
CMake files which are necessary for libMaoni's toolchain:

  $ git submodule init
  $ git submodule update

Create a folder "build", enter this folder and call 

  $ cmake .. 

Build the project using your prefered make parameter.

[tip To create your own installer use [*make package]. On Mac OS X, Cmake uses 
[@http://developer.apple.com/mac/library/documentation/DeveloperTools/Conceptual/PackageMakerUserGuide/Introduction/Introduction.html Package Maker]]
[endsect]

[section Developing libMaoni on Windows]
Install the following software to build libMaoni on Windows:

* [@http://code.google.com/p/msysgit/ GIT]
* [@http://www.cmake.org/cmake/resources/software.html CMake]
* [@http://www.microsoft.com/express/Downloads Visual C++ 2008 Express Edition]
* [@http://www.boostpro.com/download/ BoostPro Binary Installer for Visual C++]
* [@http://qt.nokia.com/downloads Qt libraries 4.6.2 for Windows]
* [@http://www.mcs.anl.gov/research/projects/mpich2/ MPICH2]
* [@http://nsis.sourceforge.net/Download NSIS Installer creator]

Install [*Visual Studio 2008], [*msysgit], [*CMake], [*Boost 1.40.0] and [*Qt LGPL].

You can use [*GIT-Bash or GUI] to clone [@http://github.com/purpleKarrot/libMaoni purpleKarrots libMaoni repository]. 
Switch to your libMaoni project folder and download important CMake files which are 
necessary for libMaoni's toolchain:

  $ git submodule init
  $ git submodule update

Open CMAKE-GUI and configure until it's successful. Generate the Visual Studio 2008 project 
files. Open libMaoni project in Visual Studio and build the release (not debug).

[tip To create your own installer use [*make package]. On Windows, Cmake uses 
[@http://nsis.sourceforge.net NSIS Windows installers creator]]
[endsect]

[endsect]
[endsect]
[endsect]

[section Parallel Rendering]
The following information on parallel rendering using libMaoni are for Ubuntu Linux.

For Equalizer as well as IceT the master node needs remote access to the 
render clients without password prompt. Install [@apt://openssh-server OpenSSH Server] 
on the clients, create a key pair on the master and copy the public key to the 
authorized_keys file on the clients ([@http://www.open-mpi.org/faq/?category=rsh#ssh-keys How-To]). 
You have to login at least once to accept the connection before the client can be used 
for parallel rendering.

[table MPI, IceT and Equalizer resources
    [[Resource] [URL]]
    [[`OpenSSHKeys`]     [[@https://help.ubuntu.com/community/SSH/OpenSSH/Keys]]]
    [[`Open MPI`]        [[@http://www.open-mpi.org/]]]
    [[`Open MPI FAQ`]    [[@http://www.open-mpi.org/faq/]]]
    [[`IceT Project`]    [[@http://www.cs.unm.edu/~kmorel/IceT/]]]
    [[`IceT User Guide`] [[@http://www.cs.unm.edu/~kmorel/IceT/IceTUsersGuide.pdf]]]
]

[section IceT]
Parallel rendering using IceT needs [@apt://libopenmpi-dev Open MPI] installed. 
Install, build or copy libMaonis's IceT binary to the same workpath on all the 
machines or use a shared drive. Start the application e.g.:

  $ mpirun -np [number of processes] --host [comma separated host names] [path to executable] -display :0

[tip Have a look at the [@http://www.open-mpi.org/faq/?category=running#simple-spmd-run Open MPI documentation]
 on how to create a host file to define your render cluster's network environment.]

[note libMaoni uses absolute Paths to load images, models and so on, thus all 
the files need to have the same absolute filesystem path]

'''
  <informalfigure>
    <mediaobject>
      <imageobject>
        <imagedata align="center" fileref="parallel_dragon.jpg" />
      </imageobject>
      <caption>
        Parallel rendering of the Stanford Dragon using eight ranks and the Comic Style Shader Algorithm. 
        The data rendered by the ranks are dyed differently.
      </caption>
    </mediaobject>
  </informalfigure>
'''
[endsect]

[section Equalizer]
Because of an open [@http://sourceforge.net/tracker/index.php?func=detail&aid=3023805&group_id=170962&atid=856209 Equalizer bug]
, the render data can't be shown in a Qt render context.
[endsect]
[endsect]
