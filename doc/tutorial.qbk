
[c++]

[section:tutorial Tutorial]
In Maoni everything is optional.
The minimal application built on Maoni consists of zero lines of code.

[section Custom File Loader]
We start by implementing a loader for meshes. To do so, declare a class and
inherit from [classref MeshLoader]. You will have to implement three virtual functions:

# `name()` shall return the name of your loader.
# `extension()` shall return the file extension (without the dot).
# `load()` shall read the mesh data from the file named `filename` and fill it
   into the [classref Model].

Lastly, create an instance of your loader. This may be either global, or static
inside your loader class. Now your code might look like this:

  class PlyLoader: public ``[classref MeshLoader]``
  {
    const char* const name() const
    {
      return "Stanford PLY";
    }
  
    const char* const extension() const
    {
      return "ply";
    }
  
    void load(Model& model, const char* filename) const;
  
    static PlyLoader instance;
  };
  
  PlyLoader PlyLoader::instance;
  
  void PlyLoader::load(``[classref Model]``& model, const char* filename) const
  {
    ...
  }

It wouldn't be very [@http://en.wikipedia.org/wiki/Don%27t_repeat_yourself DRY] 
if you had to implement the same class skeleton for each
loader, so libMaoni provides the macro [macroref MESH_LOADER] as a shortcut. The following
code expands to the code above:

  MESH_LOADER(ply, Stanford PLY)
  {
    ...
  }

You can define as many loaders as you want. Just link them all together with libMaoni;
they will register themselves automatically.
[endsect]

[section Custom Render Algorithm]
Implementing rendering algorithms with libMaoni is very similar to mesh
loaders. You just inherit your class from a provided parent, implement virtual
functions and create an instance. A macro is provided as shortcut.

Inherit from [classref RenderAlgorithm] and implement the following functions:

# `name()` shall return the name of your renderer.
# `render()` contains your rendering code.
# `config()` is used to communicate your settings with libMaoni. This function is
  used to populate the user interface, serialize settings into XML and distribute
  them to other instances when rendering in parallel.


  class FixedFunction: public ``[classref RenderAlgorithm]``
  	{
  	public:
  		FixedFunction() : wired(false) , vertex_normals(false) , 
  		ambient(Color(0.24725, 0.1995, 0.0745, 1.0)) , 
  		diffuse(Color(0.75164, 0.60648, 0.22648, 1.0)) , 
  		specular(Color(0.628281, 0.555802, 0.366065, 0.0)) , 
  		shininess(51.2)   {}
  
  		const char* name() const { return "FixedFunction"; }
  
  		void render(const Model& model) const;
  
  		void config(AlgorithmConfig& manager)
  		{
  			manager.property("wired", wired); 
  			manager.property("vertex_normals", vertex_normals); 
  			manager.property("ambient", ambient); 
  			manager.property("diffuse", diffuse); 
  			manager.property("specular", specular); 
  			manager.property("shininess", shininess);
  		}
  
  	private:
  		bool wired; 
  		bool vertex_normals; 
  		Color ambient; 
  		Color diffuse; 
  		Color specular; 
  		float shininess;
  
  		static FixedFunction instance;
  	};
  
  	FixedFunction  FixedFunction::instance;
  	void FixedFunction::render(const Model& model) const


[macroref RENDER_ALGORITHM] helps you saving some boilerplate: 

  RENDER_ALGORITHM(FixedFunction,
  		(bool, wired, false)
  		(bool, vertex_normals, false)
  		(Color, ambient, Color(0.24725, 0.1995, 0.0745, 1.0))
  		(Color, diffuse, Color(0.75164, 0.60648, 0.22648, 1.0))
  		(Color, specular, Color(0.628281, 0.555802, 0.366065, 0.0))
  		(float, shininess, 51.2))
  {
  	...
  	model.draw();
  }

The sequence of parameters will be available in the render algorithm widget so you can 
modify the behavior of your algorithm while rendering.
The following data structures can be used:

[table:1 libMaoni make parameters
    [[name] [data structure]]
    [[int] [Adds a textbox for int values]]
    [[bool] [Adds a checkbox]]
    [[float] [Adds a textbox for float values]]
    [[double] [Adds a textbox for double values]]
    [[Enum] [Adds a drop-down menu]]
    [[Path] [Adds a file open dialog]]
    [[Color] [Adds a color picker dialog]]
]

As you can see in the FixedFunction code above, there are settings for drawing the model 
in wireframe mode, the vertex normals and to change the model's material properties. 
The draw function is provided by the model data structure and contains a simple triangle renderer.

[tip You will find these data structures in the example folder.]

[endsect]

[section Enumerations]

Enumerators will appear as drop-down menu in the algorithm widget. To make the selection avaiable 
in the render algorithm, the enumarator is implemented as class.

Use [macroref ENUM] as follows:

  ENUM(ColorSelect,
  	(Red)
  	(Green)
  	(Blue)
  );

Put the enumerator to your algorithm's parameter list and use it e.g. in a switch case struct: 

  RENDER_ALGORITHM(EnumExample, 
  	(ColorSelect, color_select, ColorSelect::Green)
  )
  {
  	switch (color_select)
  	{
  	case ColorSelect::Red:
  		...
  		break;
  	case ColorSelect::Green:
  		...
  		break;
  	case ColorSelect::Blue:
  		...
  		break;
  	default:
  		...
  	}
  }

[endsect]

[section Custom Shader Programs]
To use shader programs, declare a class and inherit from [classref ShaderProgram]. In
the constructor, call [funcref ShaderProgram::attach] for each shader source string.

  struct MyProgram: ShaderProgram
  {
    MyProgram()
    {
      attach(GL_VERTEX_SHADER, vertex_source);
      attach(GL_FRAGMENT_SHADER, fragment_source);
    }
  };
  
As always, libMaoni provides a shortcut: [macroref SHADER_PROGRAM]. So you can simply
put:

  SHADER_PROGRAM(MyProgram,
    (VERTEX, vertex_source) (FRAGMENT, fragment_source),
  );

If you want to write the shader source code directly in your .cpp file, you may use the
macro [macroref SHADER_SOURCE]. This macro takes three parameters:

# the name of the shader. This is how the source string will be called.
# zero or more directives (without the `#`, each wrapped in braces). Used to specify
  the version, enable extensions and so on.
# the (unquoted) shader source code.

Example:

  SHADER_SOURCE(my_shader, (version 110) (extension all : disable),
    main()
    {
      ...
    }
  );

Will expand to:

  const char* const my_shader =
    "#version 110\n"
    "#extension all : disable\n"
    "main() { ... }";

To instanciate your shader program, use it as a member of your rendering algorithm.
Note that `ShaderProgram` and all derived classes convert implicitely to `GLuint`, so
you can pass a shader object directly to `glUseProgram`.

[section ScopedLocks macros]
ScopedLocks are an implementation of the [@http://en.wikipedia.org/wiki/RAII 
Resource Acquisition Is Initialization pattern (RAII)].
If you change OpenGL state in your render algorithm and then switch to another one, that algorithm 
probably will run on parameters which were not intened by the author. So wrap changes to OpenGL in a
ScopedLock and it will assure the parameter is resetted to the state it had before when the destructor
is called. The same goes for shader programs and textures.

LibMaoni has four kind of ScopedLocks avaiable:

* [classref ScopedEnable] to enable an OpenGL state
* [classref ScopedDisable] to disable an OpenGL state
* [classref ScopedUseProgram] to activate a shader program
* [classref ScopedBindTexture] to bind a texture

[endsect]

[section MultiTexturing]
Textures are loaded in the render algorithm and mapped to a uniform variable (e.g. `uniform sampler2D`) of a shader program.
Use [classref ScopedBindTexture] to temporarily bind your texture and `glUniform1i` for the mapping.
For every texture you need a pair of those in your render algorithm:

  ScopedBindTexture tex1_lock(tex1, GL_TEXTURE0);
  ScopedBindTexture tex2_lock(tex2, GL_TEXTURE1);
  ScopedUseProgram shader_lock(shader);
  glUniform1i(glGetUniformLocation(shader, "tex1"), 0);
  glUniform1i(glGetUniformLocation(shader, "tex2"), 0);

[caution the shader program has to be compiled and loaded (e.g. by [classref ScopedUseProgram]) before you can map uniform variables!]

[note If you would like to use some other binding parameters, feel free to implement the binding directly 
in the render algorithm. Just don't forget to reset states after drawing or you will end in 
debugging side effects.]

[note The texture name appears as uniform variable in the shader program and - if settable by the user - as 
Texture object in the render algorithm's parameter list. `glUniform1i` uses the uniform variable name, the ScopedLock uses 
the texture object.]

[endsect]
[endsect]
[endsect]
